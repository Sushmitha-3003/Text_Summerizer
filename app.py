# app.py
import streamlit as st
import os
import sys
import tempfile
from transformers.tokenization_utils_base import TruncationStrategy

# Add the parent directory to the path so the app can find your other modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Now, import the functions from your existing files
from src.data_loader import load_text_from_file
from src.summarizers.bert_summarizer import summarize_bert

def main():
    """
    Main function for the Streamlit application.
    This version uses a BERT summarization model exclusively.
    """
    st.set_page_config(page_title="Text Summarizer App", layout="wide")
    st.title("ðŸ“„ Text Summarizer App")
    st.markdown("Upload a text file to get a summary generated by a BERT model.")

    # File uploader widget
    uploaded_file = st.file_uploader("Choose a text or PDF file", type=['txt', 'pdf'])

    if uploaded_file is not None:
        # Create a temporary file to save the uploaded content
        with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(uploaded_file.name)[-1]) as temp_file:
            temp_file.write(uploaded_file.getbuffer())
            temp_file_path = temp_file.name

        try:
            st.info("Loading text...")
            article = load_text_from_file(temp_file_path)

            if article:
                st.success("Text loaded successfully!")
                
                with st.expander("Show Original Text"):
                    st.text_area("Original Content", article, height=300)

                st.subheader("Generating Summary...")
                with st.spinner("Summarizing with BERT... this may take a moment."):
                    try:
                        summary = summarize_bert(article)
                        if summary:
                            st.subheader("âœ¨ Generated Summary")
                            st.write(summary)
                        else:
                            st.error("Could not generate a summary. The input text might be too short or unreadable.")
                    except Exception as e:
                        st.error(f"An error occurred during BERT summarization: {e}. The file may contain unreadable content.")
            else:
                st.error("Could not read text from the file.")

        except Exception as e:
            st.error(f"An error occurred: {e}")
        finally:
            if os.path.exists(temp_file_path):
                os.remove(temp_file_path)

if __name__ == '__main__':
    main()
